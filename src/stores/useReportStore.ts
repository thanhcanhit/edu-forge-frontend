// src/stores/useReportStore.ts
import axios from "axios";
import { create } from "zustand";

import useUserStore from "./useUserStore";

// Định nghĩa cấu trúc dữ liệu cho báo cáo
export interface Report {
  id: string;
  title: string;
  date: string;
  data: any; // Dữ liệu báo cáo (có thể là số học viên, doanh thu, v.v.)
  aiAnalysis?: {
    chartData?: {
      revenue?: {
        labels: string[];
        datasets: {
          label: string;
          data: number[];
          backgroundColor?: string;
          borderColor?: string;
          borderWidth?: number;
        }[];
      };
      students?: {
        labels: string[];
        datasets: {
          label: string;
          data: number[];
          backgroundColor?: string[];
          borderColor?: string[];
          borderWidth?: number;
        }[];
      };
    };
    predictions?: {
      revenue?: { month: string; value: number }[];
      students?: { month: string; value: number }[];
    };
    recommendations?: string[];
    rawAnalysis?: string;
  };
  isAutoGenerated?: boolean;
  generatedBy?: string;
  createdAt?: string;
  updatedAt?: string;
}

interface ReportState {
  reports: Report[];
  isLoading: boolean;
  error: string | null;
  fetchReports: () => Promise<void>;
  fetchReportById: (id: string) => Promise<Report | undefined>;
  addReport: (report: Omit<Report, "id">) => Promise<Report>;
  updateReport: (id: string, report: Partial<Report>) => Promise<Report>;
  updateReportAnalysis: (
    id: string,
    aiAnalysis: Report["aiAnalysis"],
  ) => Promise<void>;
  deleteReport: (id: string) => Promise<void>;
  generateReport: () => Promise<Report>;
  clearReports: () => void;
  getReportById: (id: string) => Report | undefined;
}

const API_URL =
  process.env.NEXT_PUBLIC_REPORT_API_URL || "http://localhost:3007";

const useReportStore = create<ReportState>((set, get) => ({
  reports: [],
  isLoading: false,
  error: null,

  // Lấy danh sách báo cáo từ API
  fetchReports: async () => {
    set({ isLoading: true, error: null });
    try {
      const response = await axios.get(`${API_URL}/reports`);
      set({
        reports: response.data.map((report: any) => ({
          ...report,
          id: report._id,
        })),
        isLoading: false,
      });
    } catch (error) {
      console.error("Error fetching reports:", error);
      set({
        error:
          error instanceof Error ? error.message : "Failed to fetch reports",
        isLoading: false,
      });
    }
  },

  // Lấy chi tiết báo cáo theo ID
  fetchReportById: async (id: string) => {
    set({ isLoading: true, error: null });
    try {
      const response = await axios.get(`${API_URL}/reports/${id}`);
      const report = response.data;

      // Cập nhật báo cáo trong state nếu đã tồn tại
      set((state) => ({
        reports: state.reports.map((r) => (r.id === id ? report : r)),
        isLoading: false,
      }));

      return report;
    } catch (error) {
      console.error(`Error fetching report ${id}:`, error);
      set({
        error:
          error instanceof Error ? error.message : "Failed to fetch report",
        isLoading: false,
      });
      return undefined;
    }
  },

  // Thêm báo cáo mới
  addReport: async (report: Omit<Report, "id">) => {
    set({ isLoading: true, error: null });
    try {
      const response = await axios.post(`${API_URL}/reports`, report);
      const newReport = response.data;
      set((state) => ({
        reports: [...state.reports, newReport],
        isLoading: false,
      }));
      return newReport;
    } catch (error) {
      console.error("Error adding report:", error);
      set({
        error: error instanceof Error ? error.message : "Failed to add report",
        isLoading: false,
      });
      throw error;
    }
  },

  // Cập nhật báo cáo
  updateReport: async (id: string, reportData: Partial<Report>) => {
    set({ isLoading: true, error: null });
    try {
      const response = await axios.put(`${API_URL}/reports/${id}`, reportData);
      const updatedReport = response.data;
      set((state) => ({
        reports: state.reports.map((report) =>
          report.id === id ? updatedReport : report,
        ),
        isLoading: false,
      }));
      return updatedReport;
    } catch (error) {
      console.error("Error updating report:", error);
      set({
        error:
          error instanceof Error ? error.message : "Failed to update report",
        isLoading: false,
      });
      throw error;
    }
  },

  // Cập nhật phân tích AI cho báo cáo
  updateReportAnalysis: async (
    id: string,
    aiAnalysis: Report["aiAnalysis"],
  ) => {
    set({ isLoading: true, error: null });
    try {
      console.log("Updating report analysis:", id, aiAnalysis);
      await axios.post(`${API_URL}/reports/${id}/analysis`, aiAnalysis);
      set((state) => ({
        reports: state.reports.map((report) =>
          report.id === id ? { ...report, aiAnalysis } : report,
        ),
        isLoading: false,
      }));
    } catch (error) {
      console.error("Error updating report analysis:", error);
      set({
        error:
          error instanceof Error
            ? error.message
            : "Failed to update report analysis",
        isLoading: false,
      });
      throw error;
    }
  },

  // Xóa báo cáo
  deleteReport: async (id: string) => {
    set({ isLoading: true, error: null });
    try {
      await axios.delete(`${API_URL}/reports/${id}`);
      set((state) => ({
        reports: state.reports.filter((report) => report.id !== id),
        isLoading: false,
      }));
    } catch (error) {
      console.error("Error deleting report:", error);
      set({
        error:
          error instanceof Error ? error.message : "Failed to delete report",
        isLoading: false,
      });
      throw error;
    }
  },

  // Tạo báo cáo tự động
  generateReport: async () => {
    set({ isLoading: true, error: null });
    try {
      const response = await axios.post(`${API_URL}/reports/generate`, {
        userId: useUserStore.getState().user?.id || "",
      });
      const newReport = response.data;
      set((state) => ({
        reports: [...state.reports, newReport],
        isLoading: false,
      }));
      return newReport;
    } catch (error) {
      console.error("Error generating report:", error);
      set({
        error:
          error instanceof Error ? error.message : "Failed to generate report",
        isLoading: false,
      });
      throw error;
    }
  },

  // Xóa tất cả báo cáo trong state (không xóa trên server)
  clearReports: () => set({ reports: [] }),

  // Lấy báo cáo theo ID từ state
  getReportById: (id: string) =>
    get().reports.find((report) => report.id === id),
}));

export default useReportStore;
